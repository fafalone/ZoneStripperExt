[Description("ZoneStripper Shell Extension v1.0.1")]
[InterfaceId("B880702B-5988-4E1B-97C0-49791A4A0A2F")]
[ClassId("854A058F-ABC5-48B5-9EEC-F610CBC1B693")]
Public Class clsZoneStripper
Option Explicit
'****************************************************************************
'ZoneStripper Shell Extension v1.0.1
'by Jon Johnson
'
'
'This is a small context menu handler to bring the functionality of 
'ZoneStripper to a quick right click menu option.
'
'Note: The .reg file included in the project folder must be merged after 
'  the dll is compiled. The GUID in the file is much easier to find in tB:
'  It must match the [ClassId()] GUID that tB lets you specify. You don't 
'  need to find the ProgId in the registry; when you set the class id here, 
'  that's the authoritative source that's registered.
'
'Changelog:
'
'v1.0.1 (06 Oct 2024) - Initial release
'****************************************************************************
    
'Debug log
Private Const ENABLE_LOGGING As Boolean = False
Private log_hFile As LongPtr
Private log_RetVal As Long
Private log_sBuf() As String
Private log_bBuf As Boolean
Private log_bActive As Boolean


Implements IShellExtInit
Implements IContextMenu

Private mFiles() As LongPtr 'Reference files by fully qualified pidl to support renaming in virtual objects
Private nFiles As Long

Private Const sMenuHdr = "Security zones"
Private Const sHelpHdr = "Options for the zone identifier of the selected files."
Private Const sMenu1 = "Remove zone identifiers" 'Menu item caption
Private Const sVerb1 = "ziremove" 'For GCS_VERB
Private Const sHelp1 = "Remove zone identifiers from all selected files." 'For GCS_HELPTEXT
Private Const sMenu2 = "Set zone identifiers to Trusted"
Private Const sVerb2 = "zisettrusted"
Private Const sHelp2 = "Set zone identifiers to Trusted for all selected files."

Private Const IDB_HEADER16 = "201"
Private Const IDB_HEADER20 = "202"
Private Const IDB_HEADER24 = "203"

Private hBmp As LongPtr
Private mIDF As Long
    
Private mConfirmSubs As Boolean

Private Sub IShellExtInit_Initialize(ByVal pidlFolder As LongPtr, ByVal lpIDataObject As IDataObject, ByVal hkeyProgId As LongPtr) Implements IShellExtInit.Initialize
    'Get file list
    'We retrieve and keep a reference to the selected files as pidls; this way by not relying
    'on file system paths our extension should work in devices and virtual locations where
    'Explorer can still rename the files.
    nFiles = 0
    Dim psia As IShellItemArray
    Err.ReturnHResult = SHCreateShellItemArrayFromDataObject(lpIDataObject, IID_IShellItemArray, psia)
    If psia IsNot Nothing Then
        Dim pEnum As IEnumShellItems
        Dim pidl As LongPtr
        Dim siChild As IShellItem
        Dim pPersist As IPersistIDList
        Dim dbgName As String, dbglp As LongPtr
        psia.EnumItems pEnum
        If pEnum IsNot Nothing Then
            If nFiles Then
                FreeIDListArray(mFiles, nFiles)
                ReDim mFiles(0)
                nFiles = 0
            End If
        
            Do While pEnum.Next(1, siChild) = S_OK
                Set pPersist = siChild
                If pPersist IsNot Nothing Then
                    pPersist.GetIDList(pidl)
                    ReDim Preserve mFiles(nFiles)
                    mFiles(nFiles) = ILCloneFull(pidl)
                    
                    Dim dwAtr As SFGAOF
                    siChild.GetAttributes(SFGAO_FOLDER Or SFGAO_STREAM, dwAtr)
                    If ((dwAtr And SFGAO_FOLDER) = SFGAO_FOLDER) And ((dwAtr And SFGAO_STREAM) = 0) Then 'Exclude zip/cab
                        mConfirmSubs = True 'Flag to confirm recursive action on folders.
                    End If
                    
                    'Debug:
                    SHGetNameFromIDList(mFiles(nFiles), SIGDN_FILESYSPATH, dbglp)
                    dbglp = 0
                    If dbglp Then
                        WriteLog "IShellExtInit_Init::File " & LPWSTRtoStr(dbglp)
                    End If
                    
                    'Increment:
                    nFiles += 1
                End If
            Loop
        End If
    End If
End Sub

Private Sub IContextMenu_QueryContextMenu(ByVal hMenu As LongPtr, ByVal indexMenu As Long, ByVal idCmdFIrst As Long, ByVal idCmdLast As Long, ByVal uFlags As QueryContextMenuFlags) Implements IContextMenu.QueryContextMenu
    'Most examples use a vtable swap for this method, in order to be able to 
    'return an HRESULT, which is required. Fortunately, twinBASIC has 
    'Err.ReturnHResult, so we can return one right from here without a swap.

    'First, optionally insert a seperator
    Call InsertMenu(hMenu, indexMenu, MF_SEPARATOR Or MF_BYPOSITION, 0, vbNullString)

    Dim tItem As MENUITEMINFOW
    Dim hSub As LongPtr = CreatePopupMenu()

    With tItem
        .cbSize = LenB(Of MENUITEMINFOW)
        .fMask = MIIM_STRING Or MIIM_ID
        .wID = idCmdFIrst + 1
        .dwTypeData = StrPtr(sMenu1)
        .cch = Len(sMenu1)
        End With
    InsertMenuItemW hSub, 0, CTRUE, tItem
    With tItem
        .cbSize = LenB(Of MENUITEMINFOW)
        .fMask = MIIM_STRING Or MIIM_ID
        .wID = idCmdFIrst + 2
        .dwTypeData = StrPtr(sMenu2)
        .cch = Len(sMenu2)
    End With
    InsertMenuItemW hSub, 1, CTRUE, tItem

    hBmp = LoadImageW(App.hInstance, StrPtr(IDB_HEADER24), IMAGE_BITMAP, 0&, 0&, LR_DEFAULTSIZE Or LR_CREATEDIBSECTION)
    ZeroMemory tItem, LenB(tItem)
    With tItem
        .cbSize = LenB(Of MENUITEMINFOW)
        .fMask = MIIM_STRING Or MIIM_BITMAP Or MIIM_ID Or MIIM_SUBMENU
        .wID = idCmdFIrst
        .dwTypeData = StrPtr(sMenuHdr)
        .cch = Len(sMenuHdr)
        .hbmpItem = hBmp
        .hSubMenu = hSub
    End With
    InsertMenuItemW hMenu, indexMenu + 1, CTRUE, tItem


    Call InsertMenu(hMenu, indexMenu + 2, MF_SEPARATOR Or MF_BYPOSITION, 0, vbNullString)

    mIDF = idCmdFIrst

    'Per MSDN:
    ' If successful, returns an HRESULT value that has its severity value set 
    ' to SEVERITY_SUCCESS and its code value set to the offset of the largest 
    ' command identifier that was assigned, plus one. For example, if idCmdFirst 
    ' is set to 5 and you add three items to the menu with command identifiers
    ' of 5, 7, and 8, the return value should be MAKE_HRESULT(SEVERITY_SUCCESS, 0, 8 - 5 + 1).
    ' Otherwise, it returns a COM error value.
    'Since SEVERITY_SUCCESS is 0, I've ignored it.
    Err.ReturnHResult = (idCmdFIrst + 2) - idCmdFIrst + 1


End Sub

Private Sub IContextMenu_GetCommandString(ByVal idCmd As Long, ByVal uType As GetCommandStringFlags, pwReserved As Long, ByVal pszName As LongPtr, ByVal cchMax As Long) Implements IContextMenu.GetCommandString
    WriteLog "IContextMenu_GetCommandString::uType=" & uType
    Select Case uType
        Case GCS_HELPTEXT, GCS_HELPTEXTW
            Dim sText As String
            If idCmd = 0 Then sText = sHelpHdr
            If idCmd = 1 Then sText = sHelp1
            If idCmd = 2 Then sText = sHelp2

        
            Dim btText() As Byte
            If uType <> GCS_HELPTEXTW Then
                sText = StrConv(sText, vbFromUnicode)
            End If
            WriteLog "IContextMenu_GetCommandString::GCS_HELPTEXT=" & sText
            btText = sText
        
            CopyMemory ByVal pszName, btText(0), UBound(btText) + 1
        
        Case GCS_VERB, GCS_VERBW
            Dim sVerb As String
            ' If idCmd = 0 Then sVerb = sHelpHdr
            If idCmd = 1 Then sVerb = sVerb1
            If idCmd = 2 Then sVerb = sVerb2

        
            Dim btVerb() As Byte
            If uType <> GCS_HELPTEXTW Then
                sVerb = StrConv(sVerb, vbFromUnicode)
            End If
            WriteLog "IContextMenu_GetCommandString::GCS_VERB=" & sVerb
            btVerb = sVerb
        
        
            CopyMemory ByVal pszName, btVerb(0), UBound(btVerb) + 1
        
        Case Else
            Err.ReturnHResult = E_INVALIDARG
    End Select
End Sub

Private Sub IContextMenu_InvokeCommand(ByVal lpici As LongPtr) Implements IContextMenu.InvokeCommand
    If lpici = 0 Then
        Err.ReturnHResult = E_INVALIDARG
        Exit Sub
    End If
    Dim lpVerb As LongPtr
    Dim cbSize As Long = (CType(Of CMINVOKECOMMANDINFO)(lpici)).cbSize
    If cbSize = LenB(Of CMINVOKECOMMANDINFOEX) Then
        Dim tICIEx As CMINVOKECOMMANDINFOEX
        CopyMemory tICIEx, ByVal lpici, LenB(Of CMINVOKECOMMANDINFOEX)
        ' If tICIEx.fMask And CMIC_MASK_UNICODE Then
        '     lpVerb = tICIEx.lpVerbW
        '     WriteLog "IContextMenu_InvokeCommand::ExW," & lpVerb
        ' Else
        '     lpVerb = tICIEx.lpVerb
        '     WriteLog "IContextMenu_InvokeCommand::ExA," & lpVerb
        ' End If
        ' That's supposed to work, but doesn't. Explorer will set the
        ' CMIC_MASK_UNICODE flag, but only actually fill in lpVerb;
        ' lpVerbW will be 0.
        lpVerb = tICIEx.lpVerb
    ElseIf cbSize = LenB(Of CMINVOKECOMMANDINFO) Then
        Dim tICI As CMINVOKECOMMANDINFO
        CopyMemory tICI, ByVal lpici, LenB(Of CMINVOKECOMMANDINFO)
        lpVerb = tICI.lpVerb
        WriteLog "IContextMenu_InvokeCommand::Std," & lpVerb
    End If
    Dim sVerb As String, idx As Long
    #If Win64 Then
    If (lpVerb And &HFFFFFFFFFFFF0000) <> 0 Then
    #Else
    If (lpVerb And &HFFFF0000) <> 0 Then
    #End If

        ' lpVerb is a string so
        ' copy it from the pointer
        If tICIEx.fMask And CMIC_MASK_UNICODE Then
            sVerb = LPWSTRtoStr(lpVerb, False)
        Else
            sVerb = StrFromPtrA(lpVerb)
        End If
        
        If sVerb = sVerb1 Then idx = 1
        If sVerb = sVerb2 Then idx = 2

        WriteLog "IContextMenu_InvokeCommand::idxByStr=" & idx & ",mIDF=" & mIDF
    Else
        WriteLog "IContextMenu_InvokeCommand::idxById=" & idx
        idx = CLng(lpVerb)
    End If
    DoZones idx
End Sub

Private Function StrFromPtrA(ByVal lpszA As LongPtr) As String

   StrFromPtrA = String$(lstrlenA(ByVal lpszA), 0)
   lstrcpyA ByVal StrFromPtrA, ByVal lpszA

End Function

Private Sub DoZones(idx As Long)
    If mConfirmSubs Then
        Dim r As VbMsgBoxResult = MsgBox("One or more folders are selected. If you continue, all files, including those in subfolers, will be affected. Continue?", vbYesNo Or vbQuestion, "ZoneStripper Extension")
        If r = vbNo Then Exit Sub
    End If
    
    If nFiles = 0 Then Exit Sub
  
    Dim siFile As IShellItem
    Dim i As Long, j As Long
    Dim lpName As LongPtr
    Dim sFile As String
    For i = 0 To UBound(mFiles)
        SHCreateItemFromIDList(mFiles(i), IID_IShellItem, siFile)
        If siFile IsNot Nothing Then
            Dim dwAttrib As SFGAOF
            siFile.GetAttributes SFGAO_FOLDER Or SFGAO_STREAM Or SFGAO_READONLY, dwAttrib
            If ((dwAttrib And SFGAO_FOLDER) = SFGAO_FOLDER) And ((dwAttrib And SFGAO_STREAM) = 0) Then
                UpdateZonesForFolder siFile, IIf(idx = 1, URLZONE_INVALID, URLZONE_TRUSTED)
            Else
                siFile.GetDisplayName(SIGDN_FILESYSPATH, lpName)
                sFile = ""
                sFile = LPWSTRtoStr(lpName)
                If PathFileExists(sFile) = 0 Then Continue For
                If (dwAttrib And SFGAO_READONLY) = SFGAO_READONLY Then
                    ClearReadOnly sFile
                End If
                If idx = 1 Then RemoveFileSecurityZone(sFile)
                If idx = 2 Then SetFileSecurityZone(sFile, URLZONE_TRUSTED)
                If (dwAttrib And SFGAO_READONLY) = SFGAO_READONLY Then
                    AddFileAttributes sFile, FILE_ATTRIBUTE_READONLY
                End If
            End If
        End If
    Next
    
End Sub

Private Sub UpdateZonesForFolder(pFolder As IShellItem, NewZone As URLZONE)
Dim pEnum As IEnumShellItems
Dim dwAttrib As SFGAOF
Dim pChild As IShellItem
Dim pc As Long
Dim hr As Long
pFolder.BindToHandler 0&, BHID_EnumItems, IID_IEnumShellItems, pEnum
If (pEnum Is Nothing) = False Then
    Do While pEnum.Next(1&, pChild, pc) = S_OK
        pChild.GetAttributes SFGAO_FOLDER Or SFGAO_STREAM Or SFGAO_READONLY, dwAttrib
        If ((dwAttrib And SFGAO_FOLDER) = SFGAO_FOLDER) And ((dwAttrib And SFGAO_STREAM) = 0) Then
            UpdateZonesForFolder pChild, NewZone
        Else
            Dim lpPath As LongPtr, sPath As String
            pChild.GetDisplayName SIGDN_FILESYSPATH, lpPath
            sPath = LPWSTRtoStr(lpPath)
            If ZoneApplicable(sPath) Then
                If (dwAttrib And SFGAO_READONLY) = SFGAO_READONLY Then
                    ClearReadOnly sPath
                    If NewZone = URLZONE_INVALID Then
                        RemoveFileSecurityZone sPath
                    Else
                        SetFileSecurityZone sPath, NewZone
                    End If
                    AddFileAttributes sPath, FILE_ATTRIBUTE_READONLY
                Else
                    If NewZone = URLZONE_INVALID Then
                        RemoveFileSecurityZone sPath
                    Else
                        SetFileSecurityZone sPath, NewZone
                    End If
                End If
            End If
        End If
    Loop
Else
    Debug.Print "Error: Couldn't enumerate folder."
End If
End Sub

Private Function ZoneApplicable(sPath As String) As Boolean
    Dim hr As Long
    Dim nZone As URLZONE = GetFileSecurityZone(sPath, hr)
    If hr <> S_OK Then Return False
    Return (nZone <> URLZONE_INVALID)
End Function

Public Function GetFileSecurityZone(sFile As String, phr As Long) As URLZONE
'returns the Zone Identifier of a file, using IZoneIdentifier
'This could also be done by ready the Zone.Identifier alternate
'data stream directly; readfile C:\file.txt:Zone.Identifier
On Error GoTo e1 'We'll error if no zone
Dim lz As Long
Dim pZI As PersistentZoneIdentifier
Set pZI = New PersistentZoneIdentifier
    
Dim pIPF As IPersistFile
Set pIPF = pZI
    
pIPF.Load sFile, STGM_READ
pZI.GetId lz
phr = Err.LastHresult
GetFileSecurityZone = lz
    
Set pIPF = Nothing
Set pZI = Nothing
e1:
End Function
    
Public Sub SetFileSecurityZone(sFile As String, nZone As URLZONE)
'As suggested in the enum, you technically can set it to custom values
'If you do, they should be between 1000 and 10000.
Dim pZI As PersistentZoneIdentifier
Set pZI = New PersistentZoneIdentifier
    
pZI.SetId nZone
Dim pIPF As IPersistFile
Set pIPF = pZI
pIPF.Save sFile, 1
    
Set pIPF = Nothing
Set pZI = Nothing
 
End Sub
    
Public Sub RemoveFileSecurityZone(sFile As String)
Dim pZI As PersistentZoneIdentifier
Set pZI = New PersistentZoneIdentifier
    
pZI.Remove
Dim pIPF As IPersistFile
Set pIPF = pZI
pIPF.Save sFile, 1
    
Set pIPF = Nothing
Set pZI = Nothing
    
 
End Sub
    
Public Sub ClearReadOnly(sFile As String)
'Removes the read-only attribute
Dim lAtr As FILE_ATTRIBUTES
lAtr = GetFileAttributesW(StrPtr(sFile))
lAtr = lAtr And Not FILE_ATTRIBUTE_READONLY
Call SetFileAttributesW(StrPtr(sFile), lAtr)
End Sub
    
Public Sub AddFileAttributes(sFile As String, dwAttrib As FILE_ATTRIBUTES)
Dim lAtr As FILE_ATTRIBUTES
lAtr = GetFileAttributesW(StrPtr(sFile))
lAtr = lAtr Or dwAttrib
Call SetFileAttributesW(StrPtr(sFile), lAtr)
End Sub


Private Sub Class_Initialize()
    If ENABLE_LOGGING Then
        StartLog "C:\temp\ZSShellExt-" & Format$(Now, "yyyymmddHhNnSs") & ".log", False
    End If
End Sub

Private Sub Class_Terminate()
    If hBmp Then DeleteObject(hBmp)
    StopLog
    If nFiles Then
        FreeIDListArray(mFiles, nFiles)
        ReDim mFiles(0)
        nFiles = 0
    End If
End Sub

'DEBUG LOGGER:


Private Sub StartLog(szFile As String, Append As Boolean)
Debug.Print "StartLog.szFile=" & szFile
If Append = True Then
    If PathFileExistsW(StrPtr(szFile)) = 0 Then Append = False
End If
If Not Append Then
    'open the file for writing, clearing the contents of any existing file
    log_hFile = CreateFileW(StrPtr(szFile), GENERIC_WRITE, FILE_SHARE_READ, vbNullPtr, CREATE_ALWAYS, FILE_ATTRIBUTE_ARCHIVE, 0&)

    'if error
    If log_hFile = -1 Then Debug.Print "ERROR: Logfile could not be opened for writing."
Else
'open the file for appending
    log_hFile = CreateFileW(StrPtr(szFile), GENERIC_WRITE, FILE_SHARE_READ, vbNullPtr, OPEN_ALWAYS, FILE_ATTRIBUTE_ARCHIVE, 0&)
    'if error
    If log_hFile = -1 Then
        Debug.Print "ERROR: Logfile could not be opened for writing."
    Else
        'we need to move to EOF
        log_RetVal = SetFilePointer(log_hFile, 0&, 0&, FILE_END)
    End If
End If
log_bActive = True
End Sub

Private Function WriteLog(ByVal data As String) As Long
Dim lngBytesWritten As Long 'output number of bytes actually written to the file

If log_bActive = False Then Exit Function

Dim sWrite As String
sWrite = data & vbCrLf
If log_bBuf = True Then
    Call BufferEntry(sWrite)
    WriteLog = -555
Else
    WriteLog = WriteFile(log_hFile, ByVal StrPtr(sWrite), LenB(sWrite), lngBytesWritten, vbNullPtr)
End If
End Function

Private Function WriteBuffer() As Long
If (UBound(log_sBuf) = 0) And (log_sBuf(0) = "") Then Exit Function

Dim i As Long
Dim lngBytesWritten As Long 'output number of bytes actually written to the file
Dim sItem As String

For i = 0 To UBound(log_sBuf)
    sItem = log_sBuf(i) ' & vbCrLf
    WriteBuffer = WriteFile(log_hFile, ByVal StrPtr(sItem), LenB(sItem), lngBytesWritten, vbNullPtr)
Next i

ReDim log_sBuf(0)

End Function

Private Sub StopLog()
If log_hFile Then log_RetVal = CloseHandle(log_hFile)
log_hFile = 0& 'just in case
log_bActive = False
End Sub

Private Sub BufferEntry(ByVal data As String)
'exposing this as a public is purely optional
If log_sBuf(0) = "" Then
    log_sBuf(0) = data
Else
    ReDim Preserve log_sBuf(UBound(log_sBuf) + 1)
    log_sBuf(UBound(log_sBuf)) = data
End If

End Sub

Private Sub StartBuffer()
'all calls to WriteLog are stored in a buffer rather than written to disk
'this is designed for when a massive number of writes are expected in a short time,
'therefore writing to disk would be a massive reduction in performance
On Error Resume Next
'If dbg_no_buffer Then Exit Sub

log_bBuf = True

End Sub

Private Sub StopBuffer()
'writes the existing buffer to disk and returns WriteLog to immediate disk writes
log_bBuf = False
WriteBuffer

End Sub
End Class
